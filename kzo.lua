local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- GUI
local Window = Rayfield:CreateWindow({
   Name = "KZO Hub",
   Icon = 0, -- S·ª≠ d·ª•ng Lucide Icon ho·∫∑c Roblox Image
   LoadingTitle = "Hang tight, we‚Äôre crafting something epic!",
   LoadingSubtitle = "by Anphecan123p",
   Theme = "DarkBlue",

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil,
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },

   KeySystem = true,
   KeySettings = {
      Title = "KZO Hub | Key",
      Subtitle = "Discord: kabachi1311",
      Note = "Contact AD for key | Discord: kabachi1311",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"kzo_ontop131109"}
   }
})

-- T·∫°o Tab v√† Section
local MainTab = Window:CreateTab("üè† Player", nil) -- Tab ch√≠nh
local MainSection = MainTab:CreateSection("Main") -- Section trong tab

-- Th√¥ng b√°o
Rayfield:Notify({
   Title = "Thanks For Using My Script!",
   Content = "Have Fun üôÇ",
   Duration = 6.5,
   Image = nil,
})

--walkspeed

local Slider = MainTab:CreateSlider({
   Name = "Speed",
   Range = {0, 300},
   Increment = 1,
   Suffix = "%",
   CurrentValue = 16,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

--high jump

local Slider = MainTab:CreateSlider({
   Name = "High Jump",  -- T√™n c·ªßa slider
   Range = {50, 300},  -- Gi·ªõi h·∫°n gi√° tr·ªã t·ª´ 50 ƒë·∫øn 300 (t√πy theo y√™u c·∫ßu)
   Increment = 10,  -- Gia s·ªë khi thay ƒë·ªïi
   Suffix = "Power",  -- G·∫Øn th√™m d·∫•u suffix nh∆∞ l√† ƒë∆°n v·ªã "Power"
   CurrentValue = 50,  -- Gi√° tr·ªã hi·ªán t·∫°i c·ªßa slider
   Flag = "Slider1",  -- Flag ƒë·ªÉ nh·∫≠n d·∫°ng trong h·ªá th·ªëng l∆∞u c·∫•u h√¨nh
   Callback = function(Value)  -- H√†m Callback s·∫Ω nh·∫≠n gi√° tr·ªã t·ª´ slider
      -- ·ªû ƒë√¢y, Value l√† gi√° tr·ªã m√† b·∫°n ch·ªçn t·ª´ slider
      local player = game.Players.LocalPlayer
      local character = player.Character or player.CharacterAdded:Wait()
      local humanoid = character:FindFirstChildOfClass("Humanoid")
      
      -- √Åp d·ª•ng gi√° tr·ªã v√†o JumpPower c·ªßa nh√¢n v·∫≠t
      if humanoid then
         humanoid.JumpPower = Value  -- Thay ƒë·ªïi l·ª±c nh·∫£y (JumpPower) theo gi√° tr·ªã slider
      end
   end,
})




-- Infinite Jump
local InfiniteJumpEnabled = false

local Toggle = MainTab:CreateToggle({
   Name = "Infinite Jump",
   CurrentValue = false,
   Flag = "Jump", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      InfiniteJumpEnabled = not InfiniteJumpEnabled
      game:GetService("UserInputService").JumpRequest:Connect(function()
         if InfiniteJumpEnabled then
            local player = game.Players.LocalPlayer
            if player and player.Character and player.Character:FindFirstChild("Humanoid") then
               player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
         end
      end)
      Rayfield:Notify({
         Title = "Infinite Jump Toggled",
         Content = InfiniteJumpEnabled and "Enabled!" or "Disabled!",
         Duration = 4,
         Image = nil,
      })
   end,
})

--God mode
local godModeEnabled = false  -- Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i c·ªßa God Mode

local Toggle = MainTab:CreateToggle({
   Name = "God Mode",
   CurrentValue = false,
   Flag = "God Mode", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       local player = game.Players.LocalPlayer
      local character = player.Character or player.CharacterAdded:Wait()
      local humanoid = character:FindFirstChildOfClass("Humanoid")

      if humanoid then
         if not godModeEnabled then
            -- B·∫≠t God Mode
            humanoid.MaxHealth = math.huge  -- ƒê·∫∑t m√°u t·ªëi ƒëa v√¥ h·∫°n
            humanoid.Health = humanoid.MaxHealth  -- ƒê·∫∑t m√°u hi·ªán t·∫°i b·∫±ng m√°u t·ªëi ƒëa
            humanoid:SetAttribute("GodMode", true)  -- ƒê·∫∑t thu·ªôc t√≠nh GodMode
            godModeEnabled = true  -- C·∫≠p nh·∫≠t tr·∫°ng th√°i God Mode
            Rayfield:Notify({
               Title = "God Mode",
               Content = "You are now invincible! üõ°Ô∏è",
               Duration = 4,
            })
         else
            -- T·∫Øt God Mode
            humanoid.MaxHealth = 100  -- ƒê·∫∑t l·∫°i m√°u t·ªëi ƒëa (ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh)
            humanoid.Health = humanoid.MaxHealth  -- ƒê·∫∑t l·∫°i m√°u hi·ªán t·∫°i
            humanoid:SetAttribute("GodMode", false)  -- X√≥a thu·ªôc t√≠nh GodMode
            godModeEnabled = false  -- C·∫≠p nh·∫≠t tr·∫°ng th√°i God Mode
            Rayfield:Notify({
               Title = "God Mode",
               Content = "God Mode is now disabled. ‚öîÔ∏è",
               Duration = 4,
            })
         end
      else
         Rayfield:Notify({
            Title = "God Mode",
            Content = "Humanoid not found. Make sure your character is loaded! ‚ùå",
            Duration = 4,
         })
      end
   end,
})



--freecam

local Toggle = MainTab:CreateToggle({
    Name = "Toggle Free Cam",
    CurrentValue = false,
    Flag = "ToggleFreeCam", -- A flag is the identifier for the configuration file
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        local camera = game.Workspace.CurrentCamera
        local userInputService = game:GetService("UserInputService")
        local runService = game:GetService("RunService")
        
        local isFreeCamActive = Value  -- S·ª≠ d·ª•ng gi√° tr·ªã toggle ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i Free Cam
        local cameraPosition = camera.CFrame.Position
        local cameraRotation = camera.CFrame.Rotation
        
        -- H√†m b·∫≠t/t·∫Øt Free Cam
        local function toggleFreeCam()
            if isFreeCamActive then
                -- Khi b·∫≠t Free Cam, chuy·ªÉn camera sang ch·∫ø ƒë·ªô Scriptable
                camera.CameraType = Enum.CameraType.Scriptable
                camera.CFrame = CFrame.new(cameraPosition)  -- ƒê·∫∑t v·ªã tr√≠ camera t·∫°i ƒëi·ªÉm hi·ªán t·∫°i
                -- ·∫®n c∆° th·ªÉ ng∆∞·ªùi ch∆°i, l√†m cho n√≥ ƒë·ª©ng im
                player.Character.HumanoidRootPart.Anchored = true
            else
                -- Khi t·∫Øt Free Cam, ph·ª•c h·ªìi camera v·ªÅ ch·∫ø ƒë·ªô Custom
                camera.CameraType = Enum.CameraType.Custom
                player.Character.HumanoidRootPart.Anchored = false  -- H·ªßy ch·∫ø ƒë·ªô Anchor, cho ph√©p di chuy·ªÉn b√¨nh th∆∞·ªùng
            end
        end

        -- Di chuy·ªÉn camera t·ª± do khi Free Cam ƒë∆∞·ª£c b·∫≠t
        local function moveFreeCam(deltaTime)
            if isFreeCamActive then
                local moveSpeed = 50  -- T·ªëc ƒë·ªô di chuy·ªÉn camera
                local rotateSpeed = 0.5  -- T·ªëc ƒë·ªô quay camera

                -- Di chuy·ªÉn camera theo c√°c ph√≠m WASD
                local moveDirection = Vector3.new()
                if userInputService:IsKeyDown(Enum.KeyCode.W) then
                    moveDirection = moveDirection + camera.CFrame.LookVector
                end
                if userInputService:IsKeyDown(Enum.KeyCode.S) then
                    moveDirection = moveDirection - camera.CFrame.LookVector
                end
                if userInputService:IsKeyDown(Enum.KeyCode.A) then
                    moveDirection = moveDirection - camera.CFrame.RightVector
                end
                if userInputService:IsKeyDown(Enum.KeyCode.D) then
                    moveDirection = moveDirection + camera.CFrame.RightVector
                end

                -- Di chuy·ªÉn camera theo h∆∞·ªõng di chuy·ªÉn
                cameraPosition = cameraPosition + (moveDirection.Unit * moveSpeed * deltaTime)

                -- Quay camera theo chu·ªôt
                local mouseDelta = userInputService:GetMouseDelta()
                cameraRotation = cameraRotation * CFrame.Angles(0, -mouseDelta.X * rotateSpeed, 0)
                cameraRotation = cameraRotation * CFrame.Angles(-mouseDelta.Y * rotateSpeed, 0, 0)

                -- C·∫≠p nh·∫≠t l·∫°i camera
                camera.CFrame = CFrame.new(cameraPosition) * cameraRotation
            end
        end

        -- ƒêi·ªÅu ch·ªânh camera l√™n/xu·ªëng b·∫±ng ph√≠m Q v√† E
        local function adjustCameraHeight()
            if isFreeCamActive then
                if userInputService:IsKeyDown(Enum.KeyCode.Q) then
                    cameraPosition = cameraPosition - Vector3.new(0, 1, 0)  -- Di chuy·ªÉn xu·ªëng
                elseif userInputService:IsKeyDown(Enum.KeyCode.E) then
                    cameraPosition = cameraPosition + Vector3.new(0, 1, 0)  -- Di chuy·ªÉn l√™n
                end
                camera.CFrame = CFrame.new(cameraPosition) * cameraRotation
            end
        end

        -- Li√™n t·ª•c g·ªçi h√†m di chuy·ªÉn v√† quay camera m·ªói frame
        runService.RenderStepped:Connect(function(_, deltaTime)
            moveFreeCam(deltaTime)
            adjustCameraHeight()
        end)

        -- B·∫≠t/t·∫Øt Free Cam khi toggle ƒë∆∞·ª£c nh·∫•n
        toggleFreeCam()
    end,
})

--noclip

local noclipEnabled = false  -- Bi·∫øn l∆∞u tr·∫°ng th√°i Noclip
local Button = MainTab:CreateButton({
   Name = "Noclip",
   Callback = function()
      local player = game.Players.LocalPlayer
      local character = player.Character or player.CharacterAdded:Wait()
      local humanoid = character:FindFirstChildOfClass("Humanoid")
      
      if humanoid then
         -- B·∫≠t/T·∫Øt Noclip
         noclipEnabled = not noclipEnabled

         if noclipEnabled then
            -- Khi b·∫≠t Noclip
            humanoid.PlatformStand = true  -- Ng·ª´ng ki·ªÉm tra va ch·∫°m
            character.HumanoidRootPart.CanCollide = false -- T·∫Øt va ch·∫°m
            for _, part in pairs(character:GetChildren()) do
               if part:IsA("BasePart") then
                  part.CanCollide = false -- T·∫Øt va ch·∫°m cho t·∫•t c·∫£ c√°c b·ªô ph·∫≠n
               end
            end
            humanoid:ChangeState(Enum.HumanoidStateType.Physics)  -- Chuy·ªÉn sang tr·∫°ng th√°i v·∫≠t l√Ω, tr√°nh r∆°i xu·ªëng
            humanoid.WalkSpeed = 50  -- TƒÉng t·ªëc ƒë·ªô di chuy·ªÉn khi Noclip (T√πy ch·ªçn)
            Rayfield:Notify({
               Title = "Noclip Enabled",
               Content = "You can now phase through walls! üöÄ",
               Duration = 4,
            })
         else
            -- Khi t·∫Øt Noclip
            humanoid.PlatformStand = false  -- B·∫≠t l·∫°i ki·ªÉm tra va ch·∫°m
            character.HumanoidRootPart.CanCollide = true -- B·∫≠t l·∫°i va ch·∫°m
            for _, part in pairs(character:GetChildren()) do
               if part:IsA("BasePart") then
                  part.CanCollide = true -- B·∫≠t l·∫°i va ch·∫°m cho c√°c b·ªô ph·∫≠n
               end
            end
            humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)  -- Tr·ªü l·∫°i tr·∫°ng th√°i b√¨nh th∆∞·ªùng
            humanoid.WalkSpeed = 16  -- ƒê·∫∑t l·∫°i t·ªëc ƒë·ªô di chuy·ªÉn b√¨nh th∆∞·ªùng (T√πy ch·ªçn)
            Rayfield:Notify({
               Title = "Noclip Disabled",
               Content = "You are back to normal! üö´",
               Duration = 4,
            })
         end
      else
         Rayfield:Notify({
            Title = "Noclip Error",
            Content = "Humanoid not found! ‚ùå",
            Duration = 4,
         })
      end
   end,
})

--click tp

local clickTPEnabled = false  -- Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i c·ªßa Click TP

local Button = MainTab:CreateButton({
   Name = "Click TP",
   Callback = function()
      local player = game.Players.LocalPlayer
      local mouse = player:GetMouse()
      local character = player.Character or player.CharacterAdded:Wait()
      local rootPart = character:FindFirstChild("HumanoidRootPart")

      if clickTPEnabled then
         -- T·∫Øt Click TP
         clickTPEnabled = false
         Rayfield:Notify({
            Title = "Click TP",
            Content = "Click TP is now disabled. üö´",
            Duration = 4,
         })
      else
         -- B·∫≠t Click TP
         clickTPEnabled = true
         Rayfield:Notify({
            Title = "Click TP",
            Content = "Click anywhere to teleport! üöÄ",
            Duration = 5,
         })

         -- S·ª± ki·ªán click chu·ªôt
         mouse.Button1Down:Connect(function()
            if clickTPEnabled and rootPart then
               rootPart.CFrame = CFrame.new(mouse.Hit.p)  -- D·ªãch chuy·ªÉn ƒë·∫øn v·ªã tr√≠ con tr·ªè chu·ªôt
            elseif not rootPart then
               Rayfield:Notify({
                  Title = "Click TP",
                  Content = "HumanoidRootPart not found! ‚ùå",
                  Duration = 4,
               })
            end
         end)
      end
   end,
})

--tang hinh

local invisibleEnabled = false  -- Bi·∫øn theo d√µi tr·∫°ng th√°i c·ªßa Invisible Mode

local Button = MainTab:CreateButton({
   Name = "Invisible",
   Callback = function()
      local player = game.Players.LocalPlayer
      local character = player.Character or player.CharacterAdded:Wait()

      if invisibleEnabled then
         -- T·∫Øt ch·∫ø ƒë·ªô t√†ng h√¨nh
         if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            local head = character:FindFirstChild("Head")
            local torso = character:FindFirstChild("UpperTorso")

            if humanoidRootPart and head and torso then
               -- ƒê·∫∑t l·∫°i ƒë·ªô trong su·ªët v√† va ch·∫°m c·ªßa c√°c b·ªô ph·∫≠n
               humanoidRootPart.Transparency = 0
               head.Transparency = 0
               torso.Transparency = 0
               for _, part in pairs(character:GetChildren()) do
                  if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                     part.LocalTransparencyModifier = 0 -- ƒê·∫∑t l·∫°i c√°c b·ªô ph·∫≠n v·ªÅ b√¨nh th∆∞·ªùng
                  end
               end

               humanoidRootPart.CanCollide = true -- B·∫≠t va ch·∫°m l·∫°i
               head.CanCollide = true
               torso.CanCollide = true

               Rayfield:Notify({
                  Title = "Invisible Mode",
                  Content = "You are now visible again! üëÄ",
                  Duration = 4,
               })
            end
         end
      else
         -- B·∫≠t ch·∫ø ƒë·ªô t√†ng h√¨nh
         if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            local head = character:FindFirstChild("Head")
            local torso = character:FindFirstChild("UpperTorso")
            local humanoid = character:FindFirstChildOfClass("Humanoid")

            -- N·∫øu c√°c b·ªô ph·∫≠n t·ªìn t·∫°i
            if humanoidRootPart and head and torso and humanoid then
               humanoidRootPart.Transparency = 1
               head.Transparency = 1
               torso.Transparency = 1
               for _, part in pairs(character:GetChildren()) do
                  if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                     part.LocalTransparencyModifier = 1 -- ƒê·∫∑t c√°c b·ªô ph·∫≠n c√≤n l·∫°i th√†nh trong su·ªët
                  end
               end

               humanoidRootPart.CanCollide = false -- T·∫Øt va ch·∫°m ƒë·ªÉ kh√¥ng b·ªã m·∫Øc k·∫πt
               head.CanCollide = false
               torso.CanCollide = false

               Rayfield:Notify({
                  Title = "Invisible Mode",
                  Content = "You are now invisible! üëª",
                  Duration = 4,
               })
            end
         end
      end

      -- Chuy·ªÉn tr·∫°ng th√°i b·∫≠t/t·∫Øt c·ªßa Invisible Mode
      invisibleEnabled = not invisibleEnabled
   end,
})

--COMBAT MODULE

local CombatTab = Window:CreateTab("‚öîÔ∏èCombat", nil) -- Title, Image
local CombatSection = CombatTab:CreateSection("Players Esp") -- Section trong tab

--h√†m esp

local espEnabled = false
local espObjects = {}
local selectedColor = Color3.fromRGB(255, 255, 255) -- M√†u m·∫∑c ƒë·ªãnh

-- T·∫°o ColorPicker
local ColorPicker = CombatTab:CreateColorPicker({
    Name = "ESP Color Picker",
    Color = selectedColor,
    Flag = "ESPColor",
    Callback = function(Value)
        selectedColor = Value -- C·∫≠p nh·∫≠t m√†u ƒë∆∞·ª£c ch·ªçn
        for _, esp in pairs(espObjects) do
            if esp[2] then
                esp[2].FillColor = selectedColor
                esp[2].OutlineColor = selectedColor
            end
        end
    end
})

-- H√†m t·∫°o ESP cho player
local function createEspForPlayer(player)
    local character = player.Character or player.CharacterAdded:Wait()
    if character and character:FindFirstChild("HumanoidRootPart") then
        -- T·∫°o Highlight cho ESP
        local highlight = Instance.new("Highlight")
        highlight.Adornee = character
        highlight.FillTransparency = 0.5 -- ƒê·ªô trong su·ªët
        highlight.OutlineTransparency = 0
        highlight.FillColor = selectedColor
        highlight.OutlineColor = selectedColor
        highlight.Parent = character

        -- L∆∞u ESP ƒë·ªÉ x√≥a sau n√†y
        table.insert(espObjects, {player, highlight})
    end
end

-- H√†m x√≥a ESP khi player r·ªùi kh·ªèi
local function removeEspForPlayer(player)
    for i, esp in pairs(espObjects) do
        if esp[1] == player then
            esp[2]:Destroy()
            table.remove(espObjects, i)
            break
        end
    end
end


-- N√∫t b·∫≠t/t·∫Øt ESP
local Button = CombatTab:CreateButton({
    Name = "Toggle ESP",
    Callback = function()
        local localPlayer = game.Players.LocalPlayer

        espEnabled = not espEnabled

        if espEnabled then
            -- T·∫°o ESP cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i hi·ªán t·∫°i
            for _, player in pairs(game.Players:GetPlayers()) do
                if player ~= localPlayer then
                    createEspForPlayer(player)
                end
            end

            -- K·∫øt n·ªëi s·ª± ki·ªán PlayerAdded
            game.Players.PlayerAdded:Connect(function(player)
                if espEnabled then
                    createEspForPlayer(player)
                end
            end)

            -- K·∫øt n·ªëi s·ª± ki·ªán PlayerRemoving
            game.Players.PlayerRemoving:Connect(function(player)
                removeEspForPlayer(player)
            end)

            Rayfield:Notify({
                Title = "ESP",
                Content = "ESP is now enabled! üëÄ",
                Duration = 4,
            })
        else
            -- T·∫Øt ESP v√† x√≥a t·∫•t c·∫£ Highlight
            for _, esp in pairs(espObjects) do
                esp[2]:Destroy()
            end
            espObjects = {}

            Rayfield:Notify({
                Title = "ESP",
                Content = "ESP has been disabled! üö´",
                Duration = 4,
            })
        end
    end
})

--section
local CombatSection = CombatTab:CreateSection("Aimbot") -- Section trong tab

--aimbot
local Button = CombatTab:CreateButton({
    Name = "Player Aimbot",
    Callback = function()
        local player = game.Players.LocalPlayer
        local camera = game.Workspace.CurrentCamera
        local character = player.Character or player.CharacterAdded:Wait()
        local head = character:WaitForChild("Head")

        -- Bi·∫øn tr·∫°ng th√°i cho Aimbot v√† kho·∫£ng c√°ch
        local isAimbotActive = false
        local maxDistance = 50 -- Kho·∫£ng c√°ch m·∫∑c ƒë·ªãnh cho aimbot

        -- T·∫°o slider ƒë·ªÉ ƒëi·ªÅu ch·ªânh kho·∫£ng c√°ch
        local Slider = CombatTab:CreateSlider({
            Name = "Aimbot Distance",
            Range = {0, 100}, -- Kho·∫£ng c√°ch t·ª´ 0 ƒë·∫øn 100
            Increment = 1, -- M·ªói l·∫ßn thay ƒë·ªïi l√† 1
            Suffix = "Studs", -- ƒê∆°n v·ªã l√† Studs
            CurrentValue = maxDistance, -- Gi√° tr·ªã m·∫∑c ƒë·ªãnh c·ªßa slider
            Flag = "AimbotDistance", -- Flag cho vi·ªác l∆∞u c·∫•u h√¨nh
            Callback = function(Value)
                maxDistance = Value
                updateAimCircle() -- C·∫≠p nh·∫≠t v√≤ng tr√≤n khi slider thay ƒë·ªïi
            end,
        })

        -- T·∫°o v√≤ng tr√≤n aim d∆∞·ªõi ch√¢n c·ªßa ng∆∞·ªùi ch∆°i
        local aimCircle = Instance.new("Part")
        aimCircle.Shape = Enum.PartType.Cylinder
        aimCircle.Size = Vector3.new(maxDistance * 2, 1, maxDistance * 2) -- K√≠ch th∆∞·ªõc c·ªßa v√≤ng tr√≤n
        aimCircle.Anchored = true
        aimCircle.CanCollide = false
        aimCircle.Material = Enum.Material.SmoothPlastic
        aimCircle.Color = Color3.fromRGB(255, 255, 255) -- M√†u tr·∫Øng m·∫∑c ƒë·ªãnh
        aimCircle.Position = character.HumanoidRootPart.Position -- ƒê·∫∑t v√≤ng tr√≤n t·∫°i ch√¢n c·ªßa ng∆∞·ªùi ch∆°i
        aimCircle.Parent = game.Workspace

        -- H√†m c·∫≠p nh·∫≠t v√≤ng tr√≤n theo kho·∫£ng c√°ch
        local function updateAimCircle()
            aimCircle.Size = Vector3.new(maxDistance * 2, 1, maxDistance * 2) -- C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc
            aimCircle.Position = character.HumanoidRootPart.Position -- ƒê·∫∑t l·∫°i v·ªã tr√≠ v√≤ng tr√≤n d∆∞·ªõi ch√¢n ng∆∞·ªùi ch∆°i
            aimCircle.Color = Color3.fromRGB(255 - (maxDistance * 2), maxDistance * 2, 0) -- M√†u v√≤ng tr√≤n thay ƒë·ªïi theo kho·∫£ng c√°ch
        end

        -- H√†m t√¨m ki·∫øm m·ª•c ti√™u g·∫ßn nh·∫•t trong ph·∫°m vi kho·∫£ng c√°ch
        local function getClosestTarget()
            local closestTarget = nil
            local closestDistance = math.huge

            -- Duy·ªát qua t·∫•t c·∫£ c√°c ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi ch∆°i trong game
            for _, otherPlayer in pairs(game.Players:GetPlayers()) do
                if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("Head") then
                    local targetHead = otherPlayer.Character.Head
                    local distance = (targetHead.Position - head.Position).Magnitude

                    -- Ki·ªÉm tra n·∫øu kho·∫£ng c√°ch nh·ªè h∆°n maxDistance
                    if distance < closestDistance and distance <= maxDistance then
                        closestTarget = targetHead
                        closestDistance = distance
                    end
                end
            end

            return closestTarget
        end

        -- H√†m aim v√†o m·ª•c ti√™u m·ªôt c√°ch nhanh v√† m∆∞·ª£t (interpolation)
        local function aimAtTargetSmoothly(targetHead)
            local direction = (targetHead.Position - camera.CFrame.Position).unit
            local targetCFrame = CFrame.lookAt(camera.CFrame.Position, camera.CFrame.Position + direction)

            -- TƒÉng t·ªëc ƒë·ªô c·ªßa s·ª± chuy·ªÉn ƒë·ªông camera, l√†m cho aim nhanh h∆°n
            camera.CFrame = camera.CFrame:Lerp(targetCFrame, 1.5) -- TƒÉng t·ª∑ l·ªá Lerp ƒë·ªÉ aim nhanh h∆°n
        end

        -- H√†m auto aim
        local function autoAim()
            -- L·∫•y m·ª•c ti√™u g·∫ßn nh·∫•t
            local target = getClosestTarget()

            if target then
                -- Nh·∫Øm v√†o m·ª•c ti√™u g·∫ßn nh·∫•t
                aimAtTargetSmoothly(target)
            end
        end

        -- B·∫≠t/T·∫Øt Aimbot
        local function toggleAimbot()
            isAimbotActive = not isAimbotActive -- Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i
            if isAimbotActive then
                -- Khi b·∫≠t Aimbot, li√™n t·ª•c ch·∫°y auto aim
                while isAimbotActive do
                    autoAim()
                    wait(0.1)
                end
            end
        end

        -- G·ªçi toggleAimbot ƒë·ªÉ b·∫≠t t·∫Øt aimbot khi ·∫•n n√∫t
        toggleAimbot()
    end,
})
--Teleport

local TeleTab = Window:CreateTab("üó∫Ô∏èTeleport", nil) -- Title, Image
local TeleSection = TeleTab:CreateSection("Players Teleport") -- Section trong tab

--tele player

local selectedPlayerName = nil -- Bi·∫øn l∆∞u tr·ªØ t√™n player ƒë√£ ch·ªçn

-- Dropdown ƒë·ªÉ ch·ªçn player
local Dropdown = TeleTab:CreateDropdown({
   Name = "Choose Players",
   Options = function()
      local players = game.Players:GetPlayers()
      local playerNames = {}
      
      -- L·∫•y t√™n c·ªßa t·∫•t c·∫£ c√°c player trong game
      for _, p in pairs(players) do
         table.insert(playerNames, p.Name)
      end
      
      return playerNames
   end,
   CurrentOption = {"Player Name"},  -- Hi·ªÉn th·ªã t√™n ng∆∞·ªùi ch∆°i m·∫∑c ƒë·ªãnh
   MultipleOptions = false,  -- Kh√¥ng ch·ªçn nhi·ªÅu ng∆∞·ªùi ch∆°i
   Flag = "Dropdown1", -- D√πng ƒë·ªÉ x√°c ƒë·ªãnh trong t·ªáp c·∫•u h√¨nh
   Callback = function(Options)
      selectedPlayerName = Options[1]  -- L∆∞u t√™n player ƒë√£ ch·ªçn
   end,
})

-- Button ƒë·ªÉ teleport
local Button = TeleTab:CreateButton({
   Name = "Teleport to Player",
   Callback = function()
      if selectedPlayerName then
         local selectedPlayer = game.Players:FindFirstChild(selectedPlayerName)

         -- Ki·ªÉm tra n·∫øu ng∆∞·ªùi ch∆°i t·ªìn t·∫°i v√† c√≥ nh√¢n v·∫≠t
         if selectedPlayer and selectedPlayer.Character then
            local character = selectedPlayer.Character
            if character:FindFirstChild("HumanoidRootPart") then
               local rootPart = character:FindFirstChild("HumanoidRootPart")
               local playerRootPart = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

               -- D·ªãch chuy·ªÉn ƒë·∫øn v·ªã tr√≠ c·ªßa player ƒë√£ ch·ªçn
               playerRootPart.CFrame = rootPart.CFrame
               Rayfield:Notify({
                  Title = "Teleport Player",
                  Content = "Teleported to " .. selectedPlayerName .. "!",
                  Duration = 4,
               })
            end
         else
            Rayfield:Notify({
               Title = "Teleport Error",
               Content = "Selected player does not have a valid character! ‚ùå",
               Duration = 4,
            })
         end
      else
         Rayfield:Notify({
            Title = "Teleport Error",
            Content = "Please select a player first! ‚ùå",
            Duration = 4,
         })
      end
   end,
})

local WorldTab = Window:CreateTab("World", nil) -- Title, Image


local Toggle = WorldTab:CreateToggle({
    Name = "NoRender",
    CurrentValue = false,
    Flag = "NoRenderToggle",  -- Flag cho l∆∞u c·∫•u h√¨nh
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local camera = game.Workspace.CurrentCamera

        -- H√†m b·∫≠t/t·∫Øt NoRender
        local function toggleNoRender()
            if Value then
                -- Khi b·∫≠t NoRender, ·∫©n nh√¢n v·∫≠t c·ªßa ng∆∞·ªùi ch∆°i
                if character and character:FindFirstChild("Head") then
                    character:FindFirstChild("Head").Transparency = 1  -- ·∫®n ƒë·∫ßu
                    character:FindFirstChild("HumanoidRootPart").Transparency = 1  -- ·∫®n RootPart
                    -- ·∫®n t·∫•t c·∫£ c√°c b·ªô ph·∫≠n kh√°c c·ªßa nh√¢n v·∫≠t
                    for _, part in pairs(character:GetChildren()) do
                        if part:IsA("BasePart") then
                            part.Transparency = 1
                        end
                    end
                    -- ·∫®n m·ªçi th·ª© kh√°c trong Workspace
                    for _, obj in pairs(workspace:GetChildren()) do
                        if obj:IsA("Model") and obj ~= character then
                            obj:Destroy()  -- X√≥a c√°c ƒë·ªëi t∆∞·ª£ng trong game, ngo·∫°i tr·ª´ nh√¢n v·∫≠t
                        end
                    end
                end

                -- T·∫Øt render cho camera, n·∫øu c·∫ßn
                camera.FieldOfView = 0  -- Gi·∫£m Field of View ƒë·ªÉ t·∫°o c·∫£m gi√°c nh∆∞ kh√¥ng render
            else
                -- Khi t·∫Øt NoRender, ph·ª•c h·ªìi l·∫°i m·ªçi th·ª©
                if character then
                    for _, part in pairs(character:GetChildren()) do
                        if part:IsA("BasePart") then
                            part.Transparency = 0  -- Hi·ªÉn th·ªã l·∫°i c√°c b·ªô ph·∫≠n
                        end
                    end
                end
                -- Ph·ª•c h·ªìi l·∫°i Field of View c·ªßa camera
                camera.FieldOfView = 70
            end
        end

        -- G·ªçi h√†m b·∫≠t/t·∫Øt NoRender
        toggleNoRender()
    end,
})


